<!--
  ~ Copyright 2008-2011 Zuse Institute Berlin (ZIB)
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~      http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->

<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:security="http://www.springframework.org/schema/security"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
                           http://www.springframework.org/schema/beans/spring-beans.xsd
                           http://www.springframework.org/schema/security
                           http://www.springframework.org/schema/security/spring-security.xsd">

    <!--security:http>
        <security:custom-filter position="PRE_AUTH_FILTER" ref="dnFilter" />
        <security:http-basic/>
    </security:http-->


    <bean id="filterChainProxy" class="org.springframework.security.web.FilterChainProxy">
        <security:filter-chain-map path-type="ant">
            <!--<security:filter-chain pattern="/**" filters="sif,channelSec,dnFilter,etf"/>-->
            <security:filter-chain pattern="/**" filters="sif,channelSec,x509,dnFilter,etf"/>
        </security:filter-chain-map>
    </bean>
    <security:global-method-security access-decision-manager-ref="httpRequestAccessDecisionManager"
                                     proxy-target-class="true" secured-annotations="enabled" />

    <!--  Provide role-hierarchy for role-based decisions -->
    <bean id="httpRequestAccessDecisionManager" class="org.springframework.security.access.vote.AffirmativeBased">
        <constructor-arg>
            <list>
                <ref bean="roleVoter"/>
            </list>
        </constructor-arg>
        <property name="allowIfAllAbstainDecisions" value="false"/>
    </bean>

    <bean id="roleVoter" class="org.springframework.security.access.vote.RoleHierarchyVoter">
        <constructor-arg ref="roleHierarchy" />
    </bean>

    <bean id="roleHierarchy" class="org.springframework.security.access.hierarchicalroles.RoleHierarchyImpl">
        <property name="hierarchy">
            <value>
                ROLE_ADMIN > ROLE_USER
            </value>
        </property>
    </bean>


    <!-- since we're using rest we disallow session creation -->
    <bean id="sif" class="org.springframework.security.web.context.SecurityContextPersistenceFilter">
        <constructor-arg name="repo" ref="disallowContextRepo" />
    </bean>

    <bean id="disallowContextRepo"
          class="org.springframework.security.web.context.HttpSessionSecurityContextRepository">
        <property name="allowSessionCreation" value="false" />
    </bean>

    <!-- this interceptor enforces the uses of https channel security
    -->
    <bean id="channelSec" class="org.springframework.security.web.access.channel.ChannelProcessingFilter">
        <property name="channelDecisionManager" ref="channelDecisionManager"/>
        <property name="securityMetadataSource">
            <security:filter-security-metadata-source path-type="regex">
                <!--security:intercept-url pattern="\A/secure/.*\Z" access="REQUIRES_SECURE_CHANNEL"/ -->
                <!-- security:intercept-url pattern="\A/login.jsp.*\Z"  access="REQUIRES_SECURE_CHANNEL"/ -->
                <security:intercept-url pattern="\A/.*\Z" access="ANY_CHANNEL"/>
                <!--<security:intercept-url pattern="\A/.*\Z" access="REQUIRES_SECURE_CHANNEL"/>-->
            </security:filter-security-metadata-source>
        </property>
    </bean>

    <bean id="channelDecisionManager" class="org.springframework.security.web.access.channel.ChannelDecisionManagerImpl">
        <property name="channelProcessors">
            <list>
                <ref bean="secureChannelProcessor"/>
                <ref bean="insecureChannelProcessor"/>
            </list>
        </property>
    </bean>

    <bean id="secureChannelProcessor"
          class="org.springframework.security.web.access.channel.SecureChannelProcessor"/>
    <bean id="insecureChannelProcessor"
          class="org.springframework.security.web.access.channel.InsecureChannelProcessor"/>


    <!-- check x509 cert from client -->
    <bean id="x509"
          class="org.springframework.security.web.authentication.preauth.x509.X509AuthenticationFilter">
        <property name="principalExtractor" ref="fullDNExtractor" />
        <property name="authenticationManager" ref="authenticationManager" />
    </bean>

    <bean id="fullDNExtractor"
          class="de.zib.vold.security.FullDNExtractor"/>

    <!-- this authentication manager uses a provider ot make authentication decisions -->
    <security:authentication-manager alias="authenticationManager">
        <security:authentication-provider ref="preauthAuthProvider" />
    </security:authentication-manager>

    <!-- preauthAuthProvider forwards the dn from the request header to the user service -->
    <bean id="preauthAuthProvider"
          class="org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider">
        <property name="preAuthenticatedUserDetailsService">
            <bean id="userDetailsServiceWrapper"
                  class="org.springframework.security.core.userdetails.UserDetailsByNameServiceWrapper">
                <property name="userDetailsService" ref="userDetailsService"/>
            </bean>
        </property>
    </bean>

    <!-- uses the dn from the request header and generates a user details object -->
    <bean id="userDetailsService"
          class="de.zib.vold.security.GridMapUserDetailsService">
        <property name="gridMapfileName" value="/etc/grid-security/grid-mapfile" />
        <property name="adminGridMapfileName" value="/etc/grid-security/gndms-admins" />
    </bean>

    <!-- at least all headers must include the dn -->
    <bean id="dnFilter" class=
            "de.zib.vold.security.OptionalRequestHeaderAuthenticationFilter">
        <property name="principalRequestHeader" value="DN"/>
        <property name="authenticationManager" ref="authenticationManager" />
    </bean>

    <bean id="etf" class="org.springframework.security.web.access.ExceptionTranslationFilter">
        <constructor-arg name="authenticationEntryPoint" ref="http403EntryPoint"/>
    </bean>

    <bean id="http403EntryPoint"
          class="org.springframework.security.web.authentication.Http403ForbiddenEntryPoint"/>



    <!--bean id="roleFilter"
          class="org.springframework.security.web.access.intercept.FilterSecurityInterceptor">
        <property name="authenticationManager" ref="authenticationManager"/>
        <property name="accessDecisionManager" ref="httpRequestAccessDecisionManager"/>
        <property name="securityMetadataSource">
            <security:filter-invocation-definition-source>
                <security:intercept-url pattern="/**" />
            </security:filter-invocation-definition-source>
        </property>
    </bean-->
</beans>