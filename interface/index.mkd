---
title: VolD - Interface
root: ..
layout: default
---


Interface
=========

* Table of content:
{:toc}

In this part of the documentation we assume `http://localhost:8080/` to be the base URL of the VolD service.

VolD stores a structured set of typed keys each having a list of values.

Structure
---------

The structure, VolD stores the keys in, is a directory, i.e. a hierarchical tree.
Each directory, i.e. the full path to each node is called scope.
An example for a scope would be

    /path/to/node/

Keys
----

A key consists of three components:
1. a scope,
2. a type and
3. a name.
The scope has already been explained.
The type can be an arbitrary string including the empty word, but it must be URL encoded.
For names holds the same as for types.

The syntax for a key is
    \[\[SOURCE\]/SCOPE/\]\[TYPE\:\]NAME
where
* SOURCE is the source, the key comes from. This is mainly used for replication of the backend storages.
* SCOPE is the path to the tree in the hierarchy.
* TYPE is the type of the key.
* NAME is the name of the key.

Avoiding the type results in the empty type.
Hence, `/scope/keyname` and `/scope/:keyname` describe the same key.

Access
------

HTTP offers the four methods `PUT`, `POST`, `DELETE` and `GET`.
All of these methods are used to alter the storage.
* `PUT` stores some keys and its lists of values.
* `POST` refreshes some keys.
* `DELETE` deletes some keys.
* `GET` retrieves the values of keys.

Multiple keys can be altered at the same time, even if they are in a different scope.
A request to alter the keys `/c/s1/k1` and `/c/s2/k1` with the common scope `/c/` would look like

    http://localhost:8080/c?/s1/k1&/s2/k2

Sending the two requests

    http://localhost:8080/c/s1?k1
    http://localhost:8080/c/s2?k2

would have the same effect.
Especially, the two requests

    http://localhost:8080/c/s1?k1

and

    http://localhost:8080?/c/s1/k1

would access the same key.

The three methods `POST`, `DELETE` and `GET` can be tested using curl with the simple call

    curl -X [METHOD] [URL]

The call

    curl -X POST "http://localhost:8080/c/s1?k1"

would refresh the key `k1` in the scope `/c/s1`.

The `PUT` request is a bit more complicated.
The first difference is, that a request body has to be supplied.
VolD expects the Content-Type to be `application/xml`.
Now, keys can be put in the URL as well as in the body.
While the URL is good for testing and debugging, using the body is better to store huge amount of data.
Hence, the most simple call with curl to store the two keys `/c/s1/k1` and `/c/s2/k2/` would look as follows:

    curl -X PUT "http://localhost:8080/c?/s1/k1=x&/s2/k2=y" -H "Content-Type: application/xml" -d '<org.springframework.util.LinkedMultiValueMap><targetMap class="linked-hash-map"/></org.springframework.util.LinkedMultiValueMap>'

This request sends an "empty" body, i.e. a multivaluemap without any entries.
The following call uses the request body to store these two keys:

    curl -X PUT "http://localhost:8080/c" -H "Content-Type: application/xml" -d '<org.springframework.util.LinkedMultiValueMap><targetMap class="linked-hash-map"><entry><string>/s1/k1</string><linked-list><string>x</string></linked-list></entry><entry><string>/s2/k2</string><linked-list><string>y</string></linked-list></entry></targetMap></org.springframework.util.LinkedMultiValueMap>'


